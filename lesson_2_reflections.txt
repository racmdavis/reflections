What happens when you initialize a repository? Why do you need to do it?
Git init causes a repository to be initialized. You create .git in the folder and this lets you track changes.

How is the staging area different from the working directory and the repository? What value do you think it offers?
The staging area allows you to make changes that will be committed to the working directory from the repository. This is good because you are not changing things in either directory.

How can you use the staging area to make sure you have one commit per logical change?
You can only add something to the staging area when you are logically changing something.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
Branches would be helpful with work because I don't want to change the master starter file, but I do want to change my file for my project. Branches let me keep working on the file and keep track of changes, while not changing that master file and keeping it intact for the next person.

How do the diagrams help you visualize the branch structure?
It tells me what operates on what.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
The two branches have all changes and deletions combined. We represent it as we do in the diagram because it involves operating on the repository.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
Automatically merging does not take into consideration conflicts that might occur or deletions that people might have made.